// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PipelineMessage.proto
// Protobuf C++ Version: 4.26.0-dev

#include "PipelineMessage.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace opencv {

inline constexpr OcvMat::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : mat_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rows_{0},
        cols_{0},
        elt_type_{0},
        elt_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OcvMat::OcvMat(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OcvMatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OcvMatDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OcvMatDefaultTypeInternal() {}
  union {
    OcvMat _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OcvMatDefaultTypeInternal _OcvMat_default_instance_;
}  // namespace opencv
static ::_pb::Metadata file_level_metadata_PipelineMessage_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_PipelineMessage_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_PipelineMessage_2eproto = nullptr;
const ::uint32_t
    TableStruct_PipelineMessage_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::opencv::OcvMat, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::opencv::OcvMat, _impl_.rows_),
        PROTOBUF_FIELD_OFFSET(::opencv::OcvMat, _impl_.cols_),
        PROTOBUF_FIELD_OFFSET(::opencv::OcvMat, _impl_.elt_type_),
        PROTOBUF_FIELD_OFFSET(::opencv::OcvMat, _impl_.elt_size_),
        PROTOBUF_FIELD_OFFSET(::opencv::OcvMat, _impl_.mat_data_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::opencv::OcvMat)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::opencv::_OcvMat_default_instance_._instance,
};
const char descriptor_table_protodef_PipelineMessage_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025PipelineMessage.proto\022\006opencv\"Z\n\006OcvMa"
    "t\022\014\n\004rows\030\001 \001(\005\022\014\n\004cols\030\002 \001(\005\022\020\n\010elt_typ"
    "e\030\003 \001(\005\022\020\n\010elt_size\030\004 \001(\005\022\020\n\010mat_data\030\005 "
    "\001(\014b\006proto3"
};
static ::absl::once_flag descriptor_table_PipelineMessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_PipelineMessage_2eproto = {
    false,
    false,
    131,
    descriptor_table_protodef_PipelineMessage_2eproto,
    "PipelineMessage.proto",
    &descriptor_table_PipelineMessage_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_PipelineMessage_2eproto::offsets,
    file_level_metadata_PipelineMessage_2eproto,
    file_level_enum_descriptors_PipelineMessage_2eproto,
    file_level_service_descriptors_PipelineMessage_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_PipelineMessage_2eproto_getter() {
  return &descriptor_table_PipelineMessage_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_PipelineMessage_2eproto(&descriptor_table_PipelineMessage_2eproto);
namespace opencv {
// ===================================================================

class OcvMat::_Internal {
 public:
};

OcvMat::OcvMat(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:opencv.OcvMat)
}
inline PROTOBUF_NDEBUG_INLINE OcvMat::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : mat_data_(arena, from.mat_data_),
        _cached_size_{0} {}

OcvMat::OcvMat(
    ::google::protobuf::Arena* arena,
    const OcvMat& from)
    : ::google::protobuf::Message(arena) {
  OcvMat* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rows_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, rows_),
           offsetof(Impl_, elt_size_) -
               offsetof(Impl_, rows_) +
               sizeof(Impl_::elt_size_));

  // @@protoc_insertion_point(copy_constructor:opencv.OcvMat)
}
inline PROTOBUF_NDEBUG_INLINE OcvMat::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : mat_data_(arena),
        _cached_size_{0} {}

inline void OcvMat::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rows_),
           0,
           offsetof(Impl_, elt_size_) -
               offsetof(Impl_, rows_) +
               sizeof(Impl_::elt_size_));
}
OcvMat::~OcvMat() {
  // @@protoc_insertion_point(destructor:opencv.OcvMat)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OcvMat::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.mat_data_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
OcvMat::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::ClassData
      _data_ = {
          OcvMat::MergeImpl,
           nullptr,  // OnDemandRegisterArenaDtor
           &::google::protobuf::Message::kDescriptorMethods,
              PROTOBUF_FIELD_OFFSET(OcvMat, _impl_._cached_size_),
      };
  return &_data_;
}
PROTOBUF_NOINLINE void OcvMat::Clear() {
// @@protoc_insertion_point(message_clear_start:opencv.OcvMat)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mat_data_.ClearToEmpty();
  ::memset(&_impl_.rows_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.elt_size_) -
      reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.elt_size_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OcvMat::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> OcvMat::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OcvMat_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::opencv::OcvMat>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 rows = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OcvMat, _impl_.rows_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.rows_)}},
    // int32 cols = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OcvMat, _impl_.cols_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.cols_)}},
    // int32 elt_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OcvMat, _impl_.elt_type_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.elt_type_)}},
    // int32 elt_size = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OcvMat, _impl_.elt_size_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.elt_size_)}},
    // bytes mat_data = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.mat_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 rows = 1;
    {PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.rows_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 cols = 2;
    {PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.cols_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 elt_type = 3;
    {PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.elt_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 elt_size = 4;
    {PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.elt_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bytes mat_data = 5;
    {PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.mat_data_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* OcvMat::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:opencv.OcvMat)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 rows = 1;
  if (this->_internal_rows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_rows(), target);
  }

  // int32 cols = 2;
  if (this->_internal_cols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_cols(), target);
  }

  // int32 elt_type = 3;
  if (this->_internal_elt_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_elt_type(), target);
  }

  // int32 elt_size = 4;
  if (this->_internal_elt_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_elt_size(), target);
  }

  // bytes mat_data = 5;
  if (!this->_internal_mat_data().empty()) {
    const std::string& _s = this->_internal_mat_data();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:opencv.OcvMat)
  return target;
}

::size_t OcvMat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:opencv.OcvMat)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes mat_data = 5;
  if (!this->_internal_mat_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_mat_data());
  }

  // int32 rows = 1;
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_rows());
  }

  // int32 cols = 2;
  if (this->_internal_cols() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cols());
  }

  // int32 elt_type = 3;
  if (this->_internal_elt_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_elt_type());
  }

  // int32 elt_size = 4;
  if (this->_internal_elt_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_elt_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void OcvMat::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OcvMat*>(&to_msg);
  auto& from = static_cast<const OcvMat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:opencv.OcvMat)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mat_data().empty()) {
    _this->_internal_set_mat_data(from._internal_mat_data());
  }
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  if (from._internal_cols() != 0) {
    _this->_internal_set_cols(from._internal_cols());
  }
  if (from._internal_elt_type() != 0) {
    _this->_internal_set_elt_type(from._internal_elt_type());
  }
  if (from._internal_elt_size() != 0) {
    _this->_internal_set_elt_size(from._internal_elt_size());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OcvMat::CopyFrom(const OcvMat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:opencv.OcvMat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OcvMat::IsInitialized() const {
  return true;
}

void OcvMat::InternalSwap(OcvMat* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mat_data_, &other->_impl_.mat_data_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.elt_size_)
      + sizeof(OcvMat::_impl_.elt_size_)
      - PROTOBUF_FIELD_OFFSET(OcvMat, _impl_.rows_)>(
          reinterpret_cast<char*>(&_impl_.rows_),
          reinterpret_cast<char*>(&other->_impl_.rows_));
}

::google::protobuf::Metadata OcvMat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PipelineMessage_2eproto_getter, &descriptor_table_PipelineMessage_2eproto_once,
      file_level_metadata_PipelineMessage_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace opencv
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
